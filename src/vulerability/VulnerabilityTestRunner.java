package vulerability;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import device.DeviceInfo;
import org.json.JSONArray;
import org.json.JSONObject;
import util.Config;
import vulnerability_tests.NewPushTest;
import vulnerability_tests.VulnerabilityTest;
import vulnerability_tests.VulnerabilityTestFactory;

public class VulnerabilityTestRunner {

	public static boolean testViolent = true;

    private List<VulnerabilityInfo> vulnerabilities;

    public VulnerabilityTestRunner() {
    }

    public ArrayList<VulnerabilityTestResult> doTest(DeviceInfo deviceInfo){
    	vulnerabilities = loadVulListFromJson();
		NewPushTest newPushTest = new NewPushTest();
		VulnerabilityInfo[] vuls = new VulnerabilityInfo[vulnerabilities.size()];
		for(int i = 0; i < vulnerabilities.size(); i++){
			vuls[i] = vulnerabilities.get(i);
		}
		return newPushTest.pushAndTest(vuls, deviceInfo);
	}

	private String readJsonFile(String fileName) {
		String jsonStr = "";
		try {
			File jsonFile = new File(fileName);
			FileReader fileReader = new FileReader(jsonFile);
			BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(jsonFile),"utf-8"));
			String line;
			StringBuffer sb = new StringBuffer();
			while((line = br.readLine()) != null)
				sb.append(line);
			fileReader.close();
			br.close();
			jsonStr = sb.toString();
			return jsonStr;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	public ArrayList<VulnerabilityInfo> loadVulListFromJson(){
    	ArrayList<VulnerabilityInfo> vulList = new ArrayList<>();
		String localPath = System.getProperty("user.dir");
		JSONObject jo = new JSONObject(readJsonFile(localPath + File.separator + "cases" + File.separator + "poc_info.json"));
		JSONArray ja = jo.getJSONArray("poc_info");
		boolean cont;
		for(int j = 0; j < ja.length(); j++){
			cont = false;
			JSONObject temp = (JSONObject) ja.get(j);
			VulnerabilityInfo vul = new VulnerabilityInfo();
			String[] IsVulnerality=temp.getString("isVulnerality").split(";");
			HashMap<String, String> isVulneralityHash=new HashMap<>();
			for(int i=0;i<IsVulnerality.length;i++) {
				String isVulnerality=IsVulnerality[i];
				String[] isVulneralityArray=isVulnerality.split(":");
				if(isVulneralityArray[0].equals("Not Vulnerable"))
					isVulneralityHash.put("Not Vulnerable", isVulneralityArray[1]);
				else if (isVulneralityArray[0].equals("error"))
					isVulneralityHash.put("error", isVulneralityArray[1]);
				else if (isVulneralityArray[0].equals("Vulnerable")){
					try {
						Integer.valueOf(isVulneralityArray[1]);
					} catch (NumberFormatException e){
						if(testViolent){
							if(isVulneralityArray[1].equals("reboot"))
								vul.setParticularOutcome(Config.PARTICULAR_OUTCOME_REBOOT);
							if(isVulneralityArray[1].equals("shutdown"))
								vul.setParticularOutcome(Config.PARTICULAR_OUTCOME_SHUTDOWN);
						} else {
							cont = true;
							break;
						}
					}
					isVulneralityHash.put("Vulnerable", isVulneralityArray[1]);
				}
			}
			if(cont) continue;
			vul.setIsVulnerality(isVulneralityHash);
			vul.setCveId(temp.getString("cveId"));
			vul.setType(temp.getString("type"));
			vul.setDescription(temp.getString("description"));
			vul.setLocation(temp.getString("location"));
			vul.setCVSSV2Score(temp.getString("CVSSV2Score"));
			vul.setPocName(temp.getString("pocName"));
			vul.setTestType(temp.getString("testType"));
			vulList.add(vul);
		}
    	return vulList;
	}


    public VulnerabilityTestResult isVulnerable(VulnerabilityInfo vulnerability,DeviceInfo deviceInfo) {
    	VulnerabilityTestResult result=null;
    	String testType=vulnerability.getTestType();
    	VulnerabilityTest test=VulnerabilityTestFactory.getTestClass(testType);
    	result=test.testResult(vulnerability, deviceInfo);
    	System.exit(0);
    	return result;
    }

}
